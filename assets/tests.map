{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","doll/tests/lint/app.lint-test.js","doll/tests/lint/templates.template.lint-test.js","doll/tests/lint/tests.lint-test.js","doll/tests/test-helper.js","doll/tests/unit/pods/application/route-test.js","doll/tests/unit/pods/dolls/doll/route-test.js","doll/tests/unit/pods/dolls/route-test.js","doll/tests/unit/pods/items/route-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"doll/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pods/application/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/application/route.js should pass ESLint\\n\\n4:2 - Unnecessary semicolon. (no-extra-semi)');\n  });\n  QUnit.test('pods/dolls/doll/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/dolls/doll/route.js should pass ESLint\\n\\n8:2 - Unnecessary semicolon. (no-extra-semi)');\n  });\n  QUnit.test('pods/dolls/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/dolls/route.js should pass ESLint\\n\\n88:2 - Unnecessary semicolon. (no-extra-semi)');\n  });\n  QUnit.test('pods/items/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/items/route.js should pass ESLint\\n\\n38:6 - Unnecessary semicolon. (no-extra-semi)');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n});","define(\"doll/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('doll/pods/application/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'doll/pods/application/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('doll/pods/components/header/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'doll/pods/components/header/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('doll/pods/dolls/doll/bio/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'doll/pods/dolls/doll/bio/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('doll/pods/dolls/doll/items/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'doll/pods/dolls/doll/items/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('doll/pods/dolls/doll/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'doll/pods/dolls/doll/template.hbs should pass TemplateLint.\\n\\ndoll/pods/dolls/doll/template.hbs\\n  6:0  error  Invalid alt attribute. Words such as `image`, `photo,` or `picture` are already announced by screen readers.  require-valid-alt-text\\n');\n  });\n  QUnit.test('doll/pods/dolls/index/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'doll/pods/dolls/index/template.hbs should pass TemplateLint.\\n\\ndoll/pods/dolls/index/template.hbs\\n  9:12  error  Invalid alt attribute. Words such as `image`, `photo,` or `picture` are already announced by screen readers.  require-valid-alt-text\\n');\n  });\n  QUnit.test('doll/pods/items/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'doll/pods/items/template.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"doll/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pods/application/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/application/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pods/dolls/doll/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dolls/doll/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pods/dolls/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dolls/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pods/items/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/items/route-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"doll/tests/test-helper\", [\"doll/app\", \"doll/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"doll/tests/unit/pods/application/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:application');\n      assert.ok(route);\n    });\n  });\n});","define(\"doll/tests/unit/pods/dolls/doll/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | dolls/doll', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:dolls/doll');\n      assert.ok(route);\n    });\n  });\n});","define(\"doll/tests/unit/pods/dolls/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | dolls', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:dolls');\n      assert.ok(route);\n    });\n  });\n});","define(\"doll/tests/unit/pods/items/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | items', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:items');\n      assert.ok(route);\n    });\n  });\n});","define('doll/config/environment', [], function() {\n  var prefix = 'doll';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('doll/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}